#!/bin/bash

if [ -z "$1" ] || [ "$1" = "-u" ] || [ "$1" = "-a" ] || [ "$1" = "-d" ] || [ "$1" = "-l" ] || [ "$1" = "-o" ] || [ "$1" = "-rb" ] || [ "$1" = "-b" ]  || [ "$1" = "-ln" ] || [ "$1" = "-w" ] || [ "$1" = "w" ] ; then
	echo ""
	echo "sys.argv[1] = file to get hex dump from"
	echo ""
	echo "Options as follows . . ."
	echo "Default = -u & -a"
	echo ""
	echo "-d = output shellcode disassembly if sys.argv[2]"
	echo ""
	echo "-l or -o  or -u = get shellcode for unix nasm"
	echo "-w = get shellcode for windows nasm"
	echo ""
	echo "-a  = display all hex"
	echo "-rb = ruby format"
	echo "-b  = display hex block without the extra content"
	echo "-ln = display hex in line format"
	echo ""
	exit
fi

if [ "$2" = "-d" ]; then
	if [ "$3" = "-w" ]; then
		i586-mingw32-objdump -d $1.obj -M intel | support_esc.rb -d
	else
		gobjdump -d $1 -M intel | support_esc.rb -d

	fi
	exit
fi 

if [ "$2" = "-a" ]; then # get ascii
	if [ "$3" = "-w" ]; then
		i586-mingw32-objdump -d $1.obj -M intel | support_esc.rb -a
	else
		gobjdump -d $1 -M intel | support_esc.rb -a
	fi
	exit
fi 


if 	[ -z "$2" ] ||  
	[ "$2" = "-o" ] || [ "$3" = "-o" ] || 
	[ "$2" = "-l" ] || [ "$3" = "-l" ] || 
	[ "$2" = "-u" ] || [ "$3" = "-u" ]; then
	start=$(gobjdump -d $1 -M intel | support_esc.rb)
elif [ "$3" = "-w" ] || [ "$2" = "-w" ]; then
	start=$(i586-mingw32-objdump -d $1.obj -M intel | support_esc.rb)
else
	start=$(gobjdump -d $1 -M intel | support_esc.rb)
fi

single_line="$(echo $start |tr -d " " )" 
block=$(echo  "${single_line}" | sed "s/.\{1,64\}/\"&\"\n/g")

quote_block=$(echo "${block}" | sed 's/^.\{1,\}$/&/')

echo -ne "\n"

if 	[ "$2" = "-ln" ] || [ "$3" = "-ln" ] ||
	[ "$2" = "-b" ]  || [ "$3" = "-b" ]  ||
	[ "$2" = "-rb" ] || [ "$3" = "-rb" ] ||
	[ "$2" = "-u" ]  || [ "$3" = "-u" ]; then

	if [ "$2" = "-ln" ] || [ "$3" = "-ln" ]; then
		output=$(echo "${single_line}" | sed 's/^.\{1,\}$/"&"/')
		#echo "${output}"
		#echo "${single_line}" | pbcopy
	elif [ "$2" = "-b" ] || [ "$3" = "-b" ]; then
		echo "${quote_block}"
		#echo "${quote_block}" | pbcopy
	elif [ "$2" = "-rb" ] || [ "$3" = "-rb" ]; then
		ruby_block=$(echo '')
		ruby_block_tmp=$(echo '')
		for line in $quote_block; do
			dlength=${#line}
			dint=$(echo 66)
			if [ $dlength -eq $dint ]; then
				ruby_block=$(echo "${ruby_block}${line} + ")
			else
				ruby_block=$(echo "${ruby_block}${line}")
			fi	
		done
		ruby_block2="$(echo $ruby_block |tr -d " " )" # join spaces of array
		ruby_block=$(echo  "${ruby_block2}" | sed "s/+/ + \n/g")
		echo "${ruby_block}"
		#echo "${ruby_block}" | pbcopy
	elif [ "$2" = "-u" ] || [ "$3" = "-u" ]; then
		output=$(echo "${single_line}" | sed 's/^.\{1,\}$/"&"/; s/\\x/\%/g')
		echo "${output}"
		echo "${single_line}" | pbcopy
	fi
	echo "${output}"
	echo "${output}" | pbcopy > /dev/null 2>&1 # I can't use xclip here; it works best in rmutate because
	# xclip is cross python/bash compatible and can hold more data than xsel but xsel has
	# better compatibility across multiple languages. i.e. check_output/os.popen in python
	
fi
		
if 	[ "$2" != "-ln" ] && [ "$3" != "-ln" ] &&  
	[ "$2" != "-b" ]  && [ "$3" != "-b" ]  && 
	[ "$2" != "-rb" ] && [ "$3" != "-rb" ] && 
	[ "$2" != "-u" ]  && [ "$3" != "-u" ]; then
	green='\033[1;32m'  
	yellow='\033[1;33m'
	white='\033[1;37m'
	red='\033[1;31m'
	echo
	printf ${green}
	echo ===================================================================
	echo
	printf ${yellow}

	echo "${quote_block}" | pbcopy

	Dcode=$(echo "${quote_block}")
	DcodeCount=$(echo "${quote_block}" | grep -o x | wc -l)

	hex=$(printf "%x" $DcodeCount)
	shex=$(printf "%s" $hex)
	sdec=$(printf "%s" $DcodeCount)

	echo "${block}"
	echo "${block}" | pbcopy
	echo
	printf ${green} 
	echo ===================================================================
	echo
	echo "Scourge Byte Count ------- Decimal -----> $sdec"

	if [ $(echo "${single_line}" | grep -o 00 | wc -l) \> 1 ]; then
		printf ${red}; echo "Nulls Found   ------------ Hex ---------> 0x$hex" 

	elif [ $(echo "${single_line}" | grep -o 00 | wc -l) -eq 1 ];then 
		if 	(echo "${single_line}"  | sed 's/^.\{1,\}$/"&"/' | grep -o '.....$' | grep '00') > /dev/null ; then
			echo "Trailing Null Found   ---- Hex ---------> 0x$hex"
		else
			printf ${red}
			echo "Nulls Found     ---------- Hex ---------> 0x$shex" 
		fi
	else	
		echo "No Nulls Found     ------- Hex ---------> 0x$shex"
	fi


	printf ${green} 
	echo 
	echo ===================================================================
	echo
	printf ${white}

fi

# for both STDIN/STDOUT
# Rmutate r
# you could make an alias of that such as a single letter "x"
# alias x="Rmutate r"
# to your .bashrc

# then just ctrl+v or "x" to send your clipboard content out
# or 
# echo "some text" | x
# to send clipboard content in



