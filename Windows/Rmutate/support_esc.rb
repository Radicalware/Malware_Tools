#!/usr/bin/env ruby 



argCount = ARGV.length

if argCount > 0
	puts "\n"
	puts "//|"+"|"*92
	while 
		content = STDIN.first
		lines = content.split("\n")
		for line in lines
			if /<*>:/.match(line)
				puts '//|'+'-'*92+"\n//|"+(line.split(/\s/)[1].delete '<:>').center(89)+"\n"+'//|'+'-'*92

			elsif /\s[0-9a-f]{2}/.match(line)
				command = line.split(/\t/)[2]
				bytes = '"'+'\\x'+line.split(/\t/)[1].to_s.split("\s").join("\\x")+'"'
				#            ^                   ^               ^         
				if /0x/.match(command)
					begin
						ascii_forward_array = [] # \n(or)\]
						ascii_scan = command.split('0x')[1].scan /[0-9a-f]{2}/
						ascii_scan.each do |item|
							numbered = item.to_i(16)
							if numbered > 31 and numbered < 127
								item = [item].pack('H*').encode("UTF-8","Windows-1252")
								ascii_forward_array.insert(0,item)
							else
								ascii_forward_array.insert(0,' ')
							end
						end
						ascii = ascii_forward_array.join('')
					rescue
						ascii = ''
					end
				else
					ascii = ''
				end # end if

				begin 
					puts (("\s"*3+bytes.ljust(35,))+('//| ')+(ascii).center(10,)+(' |  '+command))
					# ljust pushes whitespace after the end of the content
				rescue
					puts (("\s"*3+bytes.ljust(35,))+('//| ')+(ascii).center(10,))+' |'
				end # end begin
			end		
		end
	end
	puts "//|"+"|"*92
	puts "\n"
elsif
	while
		content = STDIN.first
		lines = content.split("\n")
		for line in lines
			if /\s[0-9a-f]{2}/.match(line)
				bytes = '\\x'+line.split(/\t/)[1].to_s.split(' ').join("\\x")				
				#            ^                   ^               ^         
				puts bytes
			else
				# no "pass" in ruby sense you can have empty methods
			end
		end
	end
end
