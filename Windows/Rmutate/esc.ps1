param($1, $2)

# Author : Scourge
# email  : Scourge@protonmail.com
# Licence: GPLv3


if (!($1)){echo '''
==========================================================================

Extract Shell Code

requirements = 

1. objdump
2. ruby

==========================================================================


Syntax = esc <nasm_file> <extra_options>

Extra_Options =

/rb = ruby format
/ln = line format
/d  = disassembly format

==========================================================================

example 1:
esc nasm_file.asm /d

tell ecs to take the file "nasm_file" in your current directory
then split off the last period and replace it with obj
then disassemble
(so the same as running "esc nasm_file.obj /d" or "esc nasm_file /d")

example 2:
esc nasm_file.asm
get the shellcode block for nasm_file.obj which is the default

example 3:
esc nasm_file.asm /ln | clip


==========================================================================
''';exit}



if(!$2){$2 = 'n/a'}

if (($1 | Select-String ".\\") -and (!($1 | Select-String ".obj"))){
    $1 = '.'+$1.split('.')[1]
    $1 = $1+'.obj' 
}elseif((!($1 | Select-String ".\\")) -and (!($1 | Select-String "\."))){
    
    $1 = ('.\\'+$1+'.obj')

}


if ($2 -eq '/d'){


    $d_out = (objdump.exe -d -M intel $1 | support_esc.rb -d)



    $d_out = $d_out -replace "\|   .      \[\]", "|          []"


    if ($2 -eq '/c'){
        $split_up = @()
        Foreach ($dline in $d_out.split("`n")){
            $commented = '*' + $dline
            $split_up += $commented
        }


        $split_up2 = $split_up -join "`n"
        $split_up3 = '/' + $split_up2 + '/'
        $split_up3

    }elseif ($2 -eq '/g') {
        foreach($line in $d_out.split("`n")){
            if ($line -match "20"){
                write-host $line -ForegroundColor red
            }else{
                Write-Host $line
            }
        }
    }else{
        $d_out
    }
}else{


   $d_out = (objdump.exe -d -M intel $1 | support_esc.rb)



    $string = ''

    $prepare = @($d_out.split("`r"))
    foreach ($line in $prepare){
        $string += $line} 


    if ($2 -eq '/ln'){
        "`n`""+$string+'"'    
    }else{


        $block =  @($string.split('\'))

        $block_leng = $block.Length
    
        while ($block_leng -ge 1){
            for($i=1; $i -le 15; $i++){
                $block_16_holder += '\'+$block[$i]  
            }

            $block_16_holder = $block_16_holder -join ''     

            if ($2 -ne '/rb' -or $block_leng -le 15){
                $block_16 += '"' + $block_16_holder + '"' + "`n"
            }else{
                $block_16 += '"' + $block_16_holder + '" +' + "`n" 
            }
            $block = @($block[15..$block_leng]) 
                                                
            $block_leng = $block.Length       
            $block_16_holder = ''              
        }
    

        $bad_tail = ($block_16 -match '\\"') 
        while ($bad_tail -eq 'True' ){
            $block_16 = $block_16.replace('\"', '"')
            $bad_tail = ($block_16 -match '\\"')
        }

        if ($block_16 -match '""'){
            $block_16 = $block_16.replace('""', '')
           } 

        if ($2 -eq '/b' -or $2 -eq '/rb'){
            "`n"+$block_16
        }else{
            Write-Host ""
            write-host ("="*63+"`n") -ForegroundColor Green

            write-host $block_16 -ForegroundColor Yellow

 
            $byte_count_s = Select-String -InputObject $block_16 -Pattern "\\x" -AllMatches

            $byte_count = $byte_count_s.Matches.Count

            $hex_byte_count = ('0x'+'{0:x2}' -f $byte_count)

            $bad_byte = $block_16 | Select-String "\\x00" | Out-String 

            if($bad_byte | Out-Null){$bad_byte -eq "true" | Out-Null}else{$bad_byte -eq "false" | Out-Null}

            write-host ("="*63+"`n") -ForegroundColor Green

            write-host "Scourge Byte Count >>>>>>>>>>> $byte_count "-ForegroundColor Green

            if ($bad_byte -eq "true"){
                Write-Host -NoNewline "Nulls Found"-ForegroundColor red
                Write-Host "     >>>>>>>>>>>>>> $hex_byte_count" -ForegroundColor Green
            }else{
               Write-Host "No Nulls Found     >>>>>>>>>>> $hex_byte_count" -ForegroundColor Green
            }
            echo ""
            write-host ("="*63) -ForegroundColor Green
        }
    }
}
